package eu.estcube.scriptengine.groovy;

import com.google.common.io.Files;
import groovy.lang.GroovyClassLoader;
import groovy.lang.GroovyShell;
import org.codehaus.groovy.ast.ClassNode;
import org.codehaus.groovy.control.CompilationUnit;
import org.codehaus.groovy.control.SourceUnit;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Field;

/**
 * Created by test on 16.06.2015.
 */
public class BytecodeSpewingClassloader extends GroovyClassLoader {
    private final File folder;

    public BytecodeSpewingClassloader(GroovyClassLoader parent, File folder) {
        super(parent);
        this.folder = folder;
    }

    @Override
    protected ClassCollector createCollector(CompilationUnit unit, SourceUnit su) {
        return new ClassCollector(new InnerLoader(this), unit, su) {
            @Override
            protected Class createClass(byte[] code, ClassNode classNode) {
                File spewing = new File(folder, classNode.getName() + ".spewed.class");
                try {
                    Files.write(code, spewing);
                } catch (IOException e) {
                    e.printStackTrace();
                }

                return super.createClass(code, classNode);
            }
        };
    }

    /**
     *  Enables a hack to make the shell spew out generated bytecode on load
     *  for debugging purposes
     * @param shell
     */
    public static ClassLoader enableFor(GroovyShell shell) {
        File folder = new File("spewed");
        if (!folder.exists()) folder.mkdir();
        for (File fi : folder.listFiles()) fi.delete();

        try {
            Field f = shell.getClass().getDeclaredField("loader");
            f.setAccessible(true);
            Object old = f.get(shell);

            ClassLoader cl = new BytecodeSpewingClassloader((GroovyClassLoader) old, folder);
            f.set(shell, cl);
            return cl;
        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }
}

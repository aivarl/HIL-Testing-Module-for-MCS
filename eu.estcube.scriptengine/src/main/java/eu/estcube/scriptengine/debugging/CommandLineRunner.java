package eu.estcube.scriptengine.debugging;

import com.google.common.io.Files;
import eu.estcube.scriptengine.compilation.ScriptCompiler;
import eu.estcube.scriptengine.base.ScriptBase;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.Scanner;

/**
 * This class can be run to quickly test mcsscript code.
 *
 * Place a .mcs suffixed file with mcsscript code to WORKDIR.
 */
public class CommandLineRunner {
    public static void repl() throws IOException {
        Scanner s = new Scanner(System.in);

        boolean shouldSpew = false;
        boolean shouldTypeCheck = true;
        String lastFileName = null;

        while (true) {
            System.out
                    .println("Please enter filename (without extension) to run [.q to quit, .spew to write bytecode to spewed/, .l to run last file]");
            String line = s.nextLine();

            if (".q".equals(line)) {
                return;
            }
            if (".spew".equals(line)) {
                shouldSpew = !shouldSpew;
                System.out.println("Generated bytecode spewing " + (shouldSpew ? "enabled" : "disabled"));
                continue;
            }
            if (".type".equals(line)) {
                shouldTypeCheck = !shouldTypeCheck;
                System.out.println("Static type checking " + (shouldTypeCheck ? "enabled" : "disabled"));
                continue;
            }

            String fileName = line;
            if (".l".equals(line)) {
                fileName = lastFileName;
                if (fileName == null) {
                    System.err.println("Error: no last run file exists");
                    continue;
                }
            }
            lastFileName = fileName;

            try {
                ScriptBase scriptBase = new ScriptCompiler()
                        .setShouldSpewBytecode(shouldSpew)
                        .setShouldBeTypeChecked(shouldTypeCheck)
                        .compile(Files.toString(new File(fileName + ".mcs"), Charset.forName("UTF-8")));
                scriptBase.setContext(new DebugScriptContext());
                scriptBase.run();
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
            }
        }
    }

    public static void main(String[] args) throws IOException {
        if (args.length > 0) {
            String fileName = null;
            boolean spewBytecode = false;
            for (String arg : args) {
                if (arg.startsWith("-")) {
                    String opt = arg.substring(1);
                    if ("spew".equals(opt))
                        spewBytecode = true;
                    else
                        throw new IllegalStateException("Invalid command line switch '" + opt + "'");
                }
                else {
                    fileName = arg;
                }
            }

            if (fileName == null)
                throw new IllegalStateException("No filename provided");

            try {
                ScriptBase scriptBase = new ScriptCompiler()
                        .setShouldSpewBytecode(spewBytecode)
                        //.setShouldBeTypeChecked(shouldTypeCheck)
                        .compile(Files.toString(new File(fileName + ".mcs"), Charset.forName("UTF-8")));
                scriptBase.setContext(new DebugScriptContext());
                scriptBase.run();
            } catch (Exception e) {
                e.printStackTrace();
            }
            return;
        }

        CommandLineRunner.repl();
    }
}
